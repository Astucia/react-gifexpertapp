{"version":3,"sources":["components/CategoryAdd.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","c","type","value","onChange","target","onFocus","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","console","log","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,yCAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KA2B5C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAC,OAAKP,GAAL,mBAAmBO,OAClCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SApBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,QAoBfG,QA5BO,WACG,0CAAfZ,GACCC,EAAc,U,uBCPbY,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAgBZM,GAhBY,4CAAH,sDCDPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIrC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAACA,GACzBoB,QAAQC,IAAIrB,GAD0B,MAEZf,mBAAS,CAC/BsB,KAAM,GACNe,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAkBtC,OAXAC,qBAAW,WACP1B,EAAQC,GACH0B,MAAM,SAAAC,GACHH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAItB,CAACtB,IAEGuB,EDb0BK,CAAa5B,GAAjCa,EAHwB,EAG7BN,KAAae,EAHgB,EAGhBA,QAGrB,OACI,qCACI,qBAAIN,UAAU,oCAAd,cAAqDhB,EAArD,OAEEsB,GAAW,2CAEb,qBAAKN,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAACC,GAAD,OAER,aADA,CACC,EAAD,CAEIC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIR,KAHJQ,EAAIC,aEctBkB,EA/BM,WAAO,IAAD,EAEa5C,mBAAS,CAAC,SAFvB,mBAEhB6C,EAFgB,KAEJ9C,EAFI,KAUvB,OACI,qCACI,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEQ8C,EAAWrB,KAAK,SAAAT,GAAQ,OAEpB,aADA,CACC,EAAD,CAEIA,SAAUA,GADLA,YCrBjC+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b1ec1933.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const CategoryAdd = ({setCategories}) => {\r\n    \r\n    const [inputValue, setinputValue] = useState(\"Escriba una categoría para agregar\");\r\n    \r\n    //Limpia la caja de texto\r\n    const cleanInput = () =>{\r\n        if(inputValue === \"Escriba una categoría para agregar\"){\r\n            setinputValue('');             \r\n        }\r\n    }\r\n\r\n    //Permite escribir en la caja de texto y almacena la información\r\n    const handleInputChange = (e) => {\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    //Maneja el enter y la insersión final de texto\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 0){\r\n            //console.log('Submit ejecutado ' + inputValue);\r\n            setCategories(c => [inputValue,...c]);\r\n            setinputValue('');    \r\n        }\r\n    }    \r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={ handleInputChange }\r\n                onFocus={cleanInput}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nCategoryAdd.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};\r\n\r\n\r\n","\r\n\r\n\r\nexport const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=a1HqmewpRx5PbdQca0IOWR53pQsVQoNo`;\r\n    const resp = await fetch( url );\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n\r\n        }\r\n    })\r\n\r\n    //console.log(gifs);\r\n    //setImages(gifs);\r\n    return gifs;\r\n}","import React from 'react';\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n    \r\n    //console.log(id, title, url);\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","//import React, { useEffect, useState } from 'react';\r\nimport React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    //const [images, setImages] = useState([]);\r\n    const { data:images, loading } = useFetchGifs(category);\r\n    \r\n    \r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\r\n\r\n            { loading && <p>Loading...</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( (img) => (\r\n                        //<li key={gif.id}>{gif.title}</li>\r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            id={img.id}\r\n                            title={img.title} \r\n                            url={img.url}                    \r\n                        />\r\n                    ))\r\n                }                \r\n            </div>\r\n        </>\r\n    )\r\n};\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    console.log(category);\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs(category)\r\n            .then( imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            }                \r\n        )\r\n    }, [category])\r\n\r\n    return state;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useState }  from 'react';\r\n//import PropTypes from 'prop-types';\r\n//import userEvent from '@testing-library/user-event';\r\nimport {CategoryAdd} from './components/CategoryAdd';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Cats']);\r\n    /*\r\n    const handleAdd = () => {        \r\n        setCategories(c => [...categories, \"No Cats\"] );\r\n    }\r\n    */\r\n\r\n\r\n    return (\r\n        <>        \r\n            <h2>GifExpertApp</h2>\r\n            <hr />\r\n            <CategoryAdd setCategories={setCategories} />\r\n            <ol>\r\n                {\r\n                    categories.map( category => (                        \r\n                        //return <li key={category}>{category}</li>\r\n                        <GifGrid \r\n                            key={category}\r\n                            category={category}                         \r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,  \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}